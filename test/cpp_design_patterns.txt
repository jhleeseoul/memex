Design Patterns in C++

Design patterns are proven solutions to common software design problems. They provide a template for writing code that is reusable, maintainable, and scalable. In C++, design patterns are particularly useful due to the language's complexity and flexibility. Below are some common design patterns categorized into three types: Creational, Structural, and Behavioral.

### 1. Creational Design Patterns
Creational patterns deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.

- **Singleton**: Ensures a class has only one instance and provides a global point of access to it.
- **Factory Method**: Defines an interface for creating objects but allows subclasses to alter the type of objects that will be created.
- **Builder**: Separates the construction of a complex object from its representation, allowing the same construction process to create different representations.

### 2. Structural Design Patterns
Structural patterns deal with the composition of classes or objects to form larger structures.

- **Adapter**: Allows incompatible interfaces to work together by converting one interface into another.
- **Composite**: Composes objects into tree structures to represent part-whole hierarchies.
- **Decorator**: Adds new functionality to an object dynamically without altering its structure.

### 3. Behavioral Design Patterns
Behavioral patterns focus on communication between objects.

- **Observer**: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified.
- **Strategy**: Defines a family of algorithms, encapsulates each one, and makes them interchangeable.
- **Command**: Encapsulates a request as an object, thereby allowing users to parameterize clients with different requests, queue requests, and log them.

### Example: Singleton Pattern in C++
